require('dotenv').config();
const express = require('express');
const { 
  Client, 
  GatewayIntentBits, 
  EmbedBuilder, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle,
  ChannelType,
  PermissionFlagsBits 
} = require('discord.js');

// Constants
const CHANNELS = {
  WELCOME: '1309731725957664828',
  APPROVED: '1309911323513196674'
};

const ROLE_NAME = 'Member';
const ADMIN_ROLE = 'RD Key üîë';

// Initialize Discord client
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// Express server setup
const app = express();
const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Bot is running!');
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

// Helper Functions
const createWelcomeEmbed = (member) => {
  return new EmbedBuilder()
    .setTitle('üéâ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà!')
    .setDescription(`‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${member.user.tag} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`)
    .setColor(0x2B82FF)
    .setThumbnail(member.user.displayAvatarURL())
    .addFields(
      { name: '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà', value: `#${member.guild.memberCount}`, inline: true },
      { name: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠', value: `<t:${Math.floor(member.joinedTimestamp / 1000)}:R>`, inline: true }
    )
    .setTimestamp();
};

const createActionRow = (memberId) => {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
      .setCustomId(`approve_${memberId}`)
      .setLabel('‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')
      .setStyle(ButtonStyle.Success),
    new ButtonBuilder()
      .setCustomId(`reject_${memberId}`)
      .setLabel('‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò')
      .setStyle(ButtonStyle.Danger)
  );
};

const hasAdminPermission = (member) => {
  return member.permissions.has(PermissionFlagsBits.Administrator) || 
         member.roles.cache.some(role => role.name === ADMIN_ROLE);
};

const handleChannelError = async (interaction, channelName) => {
  console.error(`Channel ${channelName} not found`);
  return await interaction.reply({
    content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á ${channelName}`,
    ephemeral: true
  });
};

// Event Handlers
client.once('ready', () => {
  console.log(`‚úÖ ${client.user.tag} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`);
});

client.on('guildMemberAdd', async (member) => {
  try {
    const approvedChannel = member.guild.channels.cache.get(CHANNELS.APPROVED);
    
    if (!approvedChannel) {
      return console.error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á approved-chat');
    }

    const embed = createWelcomeEmbed(member);
    const row = createActionRow(member.id);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á approved
    await approvedChannel.send({
      content: `üëã ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ${member} ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥`,
      embeds: [embed],
      components: [row]
    });

  } catch (error) {
    console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô guildMemberAdd:', error);
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  try {
    if (!interaction.guild) {
      return await interaction.reply({
        content: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
        ephemeral: true
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin
    if (!hasAdminPermission(interaction.member)) {
      return await interaction.reply({
        content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Admin)',
        ephemeral: true
      });
    }

    const [action, userId] = interaction.customId.split('_');
    const member = await interaction.guild.members.fetch(userId).catch(() => null);

    if (!member) {
      return await interaction.reply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
        ephemeral: true
      });
    }

    const approvedChannel = interaction.guild.channels.cache.get(CHANNELS.APPROVED);
    if (!approvedChannel) {
      return handleChannelError(interaction, 'approved-chat');
    }

    // Handle member approval
    if (action === 'approve') {
      const role = interaction.guild.roles.cache.find(r => r.name === ROLE_NAME);
      
      if (!role) {
        return await interaction.reply({
          content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏¢‡∏® ${ROLE_NAME}`,
          ephemeral: true
        });
      }

      await member.roles.add(role);
      
      // Create success embed
      const successEmbed = new EmbedBuilder()
        .setColor(0x00FF00)
        .setTitle('‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà')
        .setDescription(`${member.user.tag} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢ ${interaction.user.tag}`)
        .setTimestamp();

      await approvedChannel.send({ embeds: [successEmbed] });
      
      // DM the approved member
      try {
        await member.send('üéâ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏∏‡∏Å‡∏ô‡∏∞');
      } catch (err) {
        console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡∏ñ‡∏∂‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏î‡πâ');
      }

    // Handle member rejection
    } else if (action === 'reject') {
      const rejectEmbed = new EmbedBuilder()
        .setColor(0xFF0000)
        .setTitle('‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å')
        .setDescription(`${member.user.tag} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÇ‡∏î‡∏¢ ${interaction.user.tag}`)
        .setTimestamp();

      await approvedChannel.send({ embeds: [rejectEmbed] });
      
      try {
        await member.send('‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
        await member.kick('Rejected by moderator');
      } catch (err) {
        console.log('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ');
      }
    }

    // Disable buttons after action
    const message = interaction.message;
    const disabledRow = new ActionRowBuilder().addComponents(
      ButtonBuilder.from(message.components[0].components[0]).setDisabled(true),
      ButtonBuilder.from(message.components[0].components[1]).setDisabled(true)
    );

    await int